#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	v_color = vertexColor;

	// Prepare Data for Fragment Shader
	// Should the normal be transformed?
	//normal = vertexNormal_modelspace;
	// eyeVector = ...
	// lightVector = ...
	 mat4 inverseMV = inverse(MV);
	mat4 inverseMVtranspose = transpose(inverseMV);
	
	normal = vec3(inverseMVtranspose * vec4(vertexNormal_modelspace, 1));

	// calculating vertex position in view space 
	vec4 vertexPosition_viewspace4D = MV * vec4(vertexPosition_modelspace, 1);
	
	//calculating view space eye vector
	vec3 vertexPosition_viewspace3D = vec3(vertexPosition_viewspace4D);
	//camera at origin (in camera space)
	eyeVector = vec3(0,0,0) - vertexPosition_viewspace3D;
	
	// Calculating destination light - source
	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	//point
	lightVector = ViewTransform * vec4(vec3(WorldLightPosition), 1) - vertexPosition_viewspace4D;


	//directional it is a vector
	if(WorldLightPosition.w < 0.5f) {
        lightVector = vec4(-lightVector.xyz, WorldLightPosition.w);
    }
}
